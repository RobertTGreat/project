# Project Rules: Developer Hub Web App

## Overview

- **Goal:** Create a unified web app hosting developer tools and news, replacing fragmented existing resources.
- **Target Audience:** Developers.
- **Core Features:**
    - Home Page: News feed, User Login/Signup, Tool/Category Favouriting.
    - Tools Section: Calculators, Converters, Compressors, Formatters, API tester, Image editors, etc., sorted into categories.
    - Admin Panel: CRUD operations for news articles.
    - Collapsible Sidebar: For easy navigation and distraction-free UX.
- **Future Scope (Optional):** Paid tier for exclusive tools (e.g., AI-powered).

## Technology Stack

- **Frontend:** React, Next.js, TypeScript
- **Backend/DB:** Supabase (Provides PostgreSQL database for data persistence and handles user authentication via Supabase Auth).
- **Version Control:** Git (CI/CD support expected)

## Development Methodology & Principles

- **Methodology:** Agile
- **Design Philosophy:** Minimal, visually striking UI/UX, responsive, accessible (WCAG standards). Max 3 clicks to access any tool from the home page.
- **React:** Adhere to one-way data binding. Use hooks like `useState` and event handlers appropriately.
- **Analysis & Design:** Use UML diagrams for functionality. Design database schema for Supabase user data, leveraging its PostgreSQL capabilities for user profiles, preferences (favourites), and potentially news article metadata. Define appropriate tables, relationships, and constraints.
- **Coding Standards:** Maintain consistency in code style. Ensure code is maintainable.

## Functional Requirements

### User Management

- **Registration:**
    - Utilize Supabase Auth to allow creation via Email/Password, Google, and other configured OAuth providers.
    - Leverage Supabase Auth's built-in email verification flow.
    - User roles (Standard, Administrator) to be managed potentially via Supabase custom claims or a dedicated roles table in the database.
- **Authentication:**
    - Implement login flows using Supabase Auth for Email/Password and configured OAuth providers.
    - Utilize Supabase Auth's secure password reset functionality.
    - Leverage Supabase Auth's session management, including options for "Remember Me" persistence.
- **Password Policy:**
    - Enforced by Supabase Auth configuration where possible, supplemented by frontend validation.
    - Min 8, Max 32 characters.
    - Must include: 1 uppercase, 1 lowercase, 1 number, 1 special character.
- **Favouriting:**
    - Users can add/remove tools/categories to favourites.
    - Favourites must sync across devices. This will be achieved by storing favourite relationships (user ID, tool/category ID) in a dedicated table within the Supabase PostgreSQL database, linked to the user's profile.

### Tools & Resources

- **Tool Listing:** Display tools clearly with descriptions, instructions, and category tags.
- **News Section:**
    - Curated developer news on the home page.
    - Users can save/bookmark articles.
    - Social sharing links for articles.

## Non-Functional Requirements

- **Performance:**
    - Home page load time < 5 seconds (average network).
    - Tool page load time < 2 seconds.
- **Usability:**
    - Responsive design (desktop, mobile, high resolutions, odd aspect ratios).
    - Adhere to accessibility standards (WCAG).
- **Security:**
    - Rely on Supabase Auth for secure password hashing and storage (handled server-side by Supabase). Ensure secure configuration within the Supabase dashboard.
    - Enforce password policy during registration/update via Supabase Auth settings and frontend validation.
    - Implement secure password reset flow using Supabase Auth's provided mechanisms.
    - **Crucially, implement and configure Supabase Row Level Security (RLS) policies on database tables to ensure users can only access and modify their own data (e.g., favourites, profile information).**
- **Compatibility:**
    - Cross-browser support: Chrome, Firefox, Edge, Opera, Brave.
- **Data Management:**
    - Use data efficiently. Leverage Supabase's database capabilities for structured data storage.
    - Ensure compliance with GDPR and CCPA regulations regarding user data. Supabase provides infrastructure, but application-level compliance (e.g., data access requests, consent management) is the developer's responsibility.
- **Maintainability:**
    - Follow consistent coding standards.
    - Manage environment configurations easily.
    - Set up for potential CI/CD pipeline using Git. 
    - Comply with GDPR and CCPA regulations regarding user data.
- **Maintainability:**
    - Follow consistent coding standards.
    - Manage environment configurations easily.
    - Set up for potential CI/CD pipeline using Git. 